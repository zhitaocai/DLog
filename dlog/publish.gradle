// bintray插件使用说明： https://github.com/bintray/gradle-bintray-plugin
// aar使用例子： https://github.com/bintray/bintray-examples/blob/master/gradle-aar-example%2Fbuild.gradle
//
// 3种上传方式的例子:
//
// Maven Publications 上传方式例子： https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/publications-example/build.gradle
// Configurations 上传方式例子： https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/configurations-example/build.gradle
// Copying specific files using filesSpec 上传方式例子： https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/filesSpec-example/build.gradle

apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// Maven Group ID for the artifact
group = project.ext.publishedGroupId
version = project.ext.libraryVersionName

install {
	repositories.mavenInstaller {
		pom {
			project {
				packaging 'aar'

				// 如果包名为io.github.zhitaocai.toastcompat
				// 那么groupId 为 io.github.zhitaocai
				// 那么artifactId 为 toastcompat
				groupId project.ext.publishedGroupId
				artifactId project.ext.artifact

				name project.ext.libraryName
				description project.ext.libDesc
				url project.ext.siteUrl

				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id System.getenv('DEVELOPER_ID')
						name System.getenv('DEVELOPER_NAME')
						email System.getenv('DEVELOPER_EMAIL')
					}
				}
				scm {
					connection project.ext.gitUrl
					developerConnection project.ext.gitUrl
					url project.ext.siteUrl

				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	configurations = ['archives'] //上传的内容有好几种方法，这里用 configurations

	// (可选参数) Whether to run this as dry-run, without deploying
	dryRun = false

	// (可选参数) If version should be auto published after an upload Package configuration. The plugin will use the repo and name
	// properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
	publish = true

	pkg {

		// (必须参数)existing repository in bintray to add the artifacts to (for example: 'generic', 'maven' etc)
		repo = 'maven'
		// repo = 'android'

		// (必须参数)package name
		name = project.ext.libraryName

		// (必须参数)开源许可协议
		licenses = ['Apache-2.0']

		// (必须参数)VCS URL
		vcsUrl = project.ext.gitUrl

		// (可选参数) 标签
		labels = project.ext.libLabels

		// (可选参数) 描述
		desc = project.ext.libDesc

		// (可选参数)主页
		websiteUrl = project.ext.siteUrl

		// (可选参数)issue 跟踪地址
		issueTrackerUrl = project.ext.issueUrl

		// (可选参数)是否公开下载次数
		publicDownloadNumbers = true

		// (可选参数)仓库短地址
		githubRepo = project.ext.gitRepo

		// (可选参数)仓库地址下的README.md
		githubReleaseNotesFile = project.ext.releaseNoteFile

		// (可选参数)package-level attributes 暂时不是很懂意思和用法
		// attributes = ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee']

		// (可选参数)when the repo belongs to one of the user's orgs. If not added will use 'BINTRAY_USER' by default
		// userOrg = user

		// 版本信息
		version {
			// 必须参数
			name = project.ext.libraryVersionName

			// 可选参数

			// 版本描述
			desc = project.ext.libraryVersionDesc

			// 发布日期
			released = new Date().format('yyyy-MM-dd\'T\'HH:mm:ss.SSSZZ')

			// Version control tag name 应该是对应类库的tag
			vcsTag = project.ext.repoTag

			// Attributes to be attached to the version(还不是很懂这个参数使用)
			// attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']

//			//Optional version-level attributes
//			//Optional configuration for GPG signing
			gpg {
				sign = true //Determines whether to GPG sign the files. The default is false
				passphrase = System.getenv('BINTRAY_GPG_PSW') //Optional. The passphrase for GPG signing'
			}
//
//			//Optional configuration for Maven Central sync of the version
//			mavenCentralSync {
//				sync = true //Optional (true by default). Determines whether to sync the version to Maven Central.
//				user = 'userToken' //OSS user token
//				password = 'paasword' //OSS user password
//				close = '1'
//				//Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
//			}
		}

	}
}

task sourcesJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier = 'sources'
}

task javadoc(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

javadoc {
	options{
		encoding "UTF-8"
		charSet 'UTF-8'
		author true
		version project.ext.libraryVersionName
		links "http://docs.oracle.com/javase/7/docs/api"
		title project.name
	}
}